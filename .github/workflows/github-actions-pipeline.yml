name: CI Pipeline

on: [push, pull_request]

jobs:
  validate-java:
    runs-on: [self-hosted, linux, x64]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Validate Java 21
        run: |
          java -version 2>&1 | grep "version \"21" && echo "Java 21 is installed" || (echo "Java 21 is not installed" && exit 1)
        shell: bash
        if: runner.os != 'Windows'

      - name: Validate Java 21 on Windows
        run: |
          java -version 2>&1 | findstr /C:"version \"21"
          if %errorlevel% == 0 (
            echo Java 21 is installed
          ) else (
            echo Java 21 is not installed
            exit 1
          )
        shell: cmd
        if: runner.os == 'Windows'

  generate-token-dl-project:
    runs-on: [self-hosted, linux, x64]
    needs: validate-java
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate access_token
        id: generate_token
        run: |
          ACCESS_TOKEN=$(curl -X POST 'https://keycloakdev.codelessauto.io/realms/test/protocol/openid-connect/token' \
          -H 'Content-Type: application/x-www-form-urlencoded' \
          -d 'client_id=${{ vars.CLIENT_ID }}' \
          -d 'grant_type=password' \
          -d "username=${{ secrets.USERNAME }}" \
          -d "password=${{ secrets.PASSWORD }}" | jq -r '.access_token')

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Error: Failed to generate access token"
            exit 1
          fi

          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Display the extracted access_token
        run: echo "Access Token:" "${{ steps.generate_token.outputs.ACCESS_TOKEN }}"

      - name: Download Project
        run: |
          curl -f -X POST -H "Authorization: Bearer ${{ steps.generate_token.outputs.ACCESS_TOKEN }}" --output project.zip "${{ vars.PROJECT_URL }}"

      - name: Extract Linux
        if: runner.os != 'Windows'
        run: |
          mkdir project && cd project
          unzip ../project.zip -d .
          mkdir target && pwd

      - name: Extract Windows
        if: runner.os == 'Windows'
        run: |
          mkdir project && cd project
          tar -xf ../project.zip
          mkdir target

      - name: Run Tests
        run: |
          cd project
          java -cp "./Plugins/*" "-DenvToUse=production" io.cucumber.core.cli.Main \
          --plugin "me.jvt.cucumber.report.PrettyReports:./target" \
          --plugin "html:./target/cucumber" \
          --plugin "json:./target/cucumber-json/cucumber.json" \
          --plugin "pretty" \
          "./src/test/resources/features" \
          --glue "com.accenture.stepdefs" "--tags"
       # env:
        #  ENVTOUSE: ${{ secrets.ENVTOUSE }}
         # TAGS_TO_RUN: ${{ secrets.TAGS_TO_RUN }}

      - name: Publish Cucumber Business Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CucumberBusinessResults
          path: project/target/cucumber-html-reports

      - name: Publish Extend Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CAFResults
          path: project/Report.html

      - name: Publish Test Video
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestExecutionVideo
          path: project/target/testRecordings
